"""
Django settings for cloud_drive project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from utils.ConfigReader import ConfigReader
from dotenv import load_dotenv
from os import getenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv()
configfile = ConfigReader('run/etc.xml')
TAG = 'file_system'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = configfile.getProperty(TAG+".django_secret")
POOL_SIZE = int(configfile.getProperty(TAG+".mysql_pool"))
HOSTNAME = configfile.getProperty(TAG+".mysql_hostname").replace("${MYSQL_HOSTNAME}", getenv("MYSQL_HOSTNAME") if getenv("MYSQL_HOSTNAME") != None else "")
DATABASE_NAME = configfile.getProperty(TAG+".mysql_database_name").replace("${MYSQL_DB}", getenv("MYSQL_DB") if getenv("MYSQL_DB") != None else "")
USERNAME = configfile.getProperty(TAG+".mysql_user").replace("${MYSQL_USER}", getenv("MYSQL_USER") if getenv("MYSQL_USER") != None else "")
PASSWORD = configfile.getProperty(TAG+".mysql_password").replace("${MYSQL_PASS}", getenv("MYSQL_PASS") if getenv("MYSQL_PASS") != None else "")
PORT = configfile.getProperty(TAG+".mysql_port").replace("${PORT}", getenv("PORT") if getenv("PORT") != None else "")
CA_CERT = configfile.getProperty(TAG+".sql_cert")
CORS_LIST = configfile.getProperty(TAG+".cors_list")
CORS_LIST: list = CORS_LIST.replace(" ", "").split(",")



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = configfile.getProperty(TAG+".debug")


ALLOWED_HOSTS = CORS_LIST
CORS_ALLOWED_ORIGINS = CORS_LIST


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Library
    "corsheaders",
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    # Apps
    'authentication',
    'file_system',
    'health_app'
]

REST_FRAMEWORK = {
    
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=366),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cloud_drive.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cloud_drive.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DATABASE_NAME,
        'USER': USERNAME,
        'PASSWORD': PASSWORD,
        'HOST': HOSTNAME,
        'PORT':PORT,
        'OPTIONS': {
            'ssl': {
                'ca': CA_CERT
            }
        },
        'POOL_OPTIONS': {
            'POOL_SIZE': POOL_SIZE,
            'MAX_OVERFLOW': POOL_SIZE,
            'RECYCLE': 24 * 60 * 60
        },
        
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
